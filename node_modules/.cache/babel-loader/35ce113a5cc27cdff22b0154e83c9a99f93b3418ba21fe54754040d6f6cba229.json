{"ast":null,"code":"import{useState,useEffect}from'react';export const useLoadingState=function(){let dependencies=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];let timeout=arguments.length>1&&arguments[1]!==undefined?arguments[1]:5000;const[isLoading,setIsLoading]=useState(true);const[progress,setProgress]=useState(0);useEffect(()=>{let mounted=true;const checkDependencies=async()=>{try{// If no dependencies, just wait for a minimal time\nif(dependencies.length===0){await new Promise(resolve=>setTimeout(resolve,100));if(mounted){setIsLoading(false);}return;}// Check if all dependencies are resolved\nconst results=await Promise.allSettled(dependencies);const successful=results.filter(result=>result.status==='fulfilled').length;const progressPercent=successful/dependencies.length*100;if(mounted){setProgress(progressPercent);if(successful===dependencies.length){setIsLoading(false);}}}catch(error){console.warn('Loading check failed:',error);if(mounted){setIsLoading(false);}}};// Set a timeout to prevent infinite loading\nconst timeoutId=setTimeout(()=>{if(mounted){setIsLoading(false);}},timeout);checkDependencies();return()=>{mounted=false;clearTimeout(timeoutId);};},[dependencies,timeout]);return{isLoading,progress};};export const useImageLoading=function(){let imageUrls=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];const[isLoading,setIsLoading]=useState(true);const[loadedCount,setLoadedCount]=useState(0);useEffect(()=>{if(imageUrls.length===0){setIsLoading(false);return;}let mounted=true;let loaded=0;const checkImageLoad=()=>{loaded++;if(mounted){setLoadedCount(loaded);if(loaded>=imageUrls.length){setIsLoading(false);}}};// Preload images\nimageUrls.forEach(url=>{const img=new Image();img.onload=checkImageLoad;img.onerror=checkImageLoad;// Continue even if image fails\nimg.src=url;});// Fallback timeout\nconst timeoutId=setTimeout(()=>{if(mounted){setIsLoading(false);}},3000);return()=>{mounted=false;clearTimeout(timeoutId);};},[imageUrls]);return{isLoading,loadedCount,totalImages:imageUrls.length};};export const usePageLoading=()=>{const[isLoading,setIsLoading]=useState(true);useEffect(()=>{const handleLoad=()=>{setIsLoading(false);};if(document.readyState==='complete'){setIsLoading(false);}else{window.addEventListener('load',handleLoad);return()=>window.removeEventListener('load',handleLoad);}},[]);return{isLoading};};","map":{"version":3,"names":["useState","useEffect","useLoadingState","dependencies","arguments","length","undefined","timeout","isLoading","setIsLoading","progress","setProgress","mounted","checkDependencies","Promise","resolve","setTimeout","results","allSettled","successful","filter","result","status","progressPercent","error","console","warn","timeoutId","clearTimeout","useImageLoading","imageUrls","loadedCount","setLoadedCount","loaded","checkImageLoad","forEach","url","img","Image","onload","onerror","src","totalImages","usePageLoading","handleLoad","document","readyState","window","addEventListener","removeEventListener"],"sources":["C:/Users/Loai/pmi-it-website/src/hooks/useLoadingState.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nexport const useLoadingState = (dependencies = [], timeout = 5000) => {\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [progress, setProgress] = useState(0);\r\n\r\n  useEffect(() => {\r\n    let mounted = true;\r\n\r\n    const checkDependencies = async () => {\r\n      try {\r\n        // If no dependencies, just wait for a minimal time\r\n        if (dependencies.length === 0) {\r\n          await new Promise(resolve => setTimeout(resolve, 100));\r\n          if (mounted) {\r\n            setIsLoading(false);\r\n          }\r\n          return;\r\n        }\r\n\r\n        // Check if all dependencies are resolved\r\n        const results = await Promise.allSettled(dependencies);\r\n        const successful = results.filter(result => result.status === 'fulfilled').length;\r\n        const progressPercent = (successful / dependencies.length) * 100;\r\n        \r\n        if (mounted) {\r\n          setProgress(progressPercent);\r\n          \r\n          if (successful === dependencies.length) {\r\n            setIsLoading(false);\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.warn('Loading check failed:', error);\r\n        if (mounted) {\r\n          setIsLoading(false);\r\n        }\r\n      }\r\n    };\r\n\r\n    // Set a timeout to prevent infinite loading\r\n    const timeoutId = setTimeout(() => {\r\n      if (mounted) {\r\n        setIsLoading(false);\r\n      }\r\n    }, timeout);\r\n\r\n    checkDependencies();\r\n\r\n    return () => {\r\n      mounted = false;\r\n      clearTimeout(timeoutId);\r\n    };\r\n  }, [dependencies, timeout]);\r\n\r\n  return { isLoading, progress };\r\n};\r\n\r\nexport const useImageLoading = (imageUrls = []) => {\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [loadedCount, setLoadedCount] = useState(0);\r\n\r\n  useEffect(() => {\r\n    if (imageUrls.length === 0) {\r\n      setIsLoading(false);\r\n      return;\r\n    }\r\n\r\n    let mounted = true;\r\n    let loaded = 0;\r\n\r\n    const checkImageLoad = () => {\r\n      loaded++;\r\n      if (mounted) {\r\n        setLoadedCount(loaded);\r\n        if (loaded >= imageUrls.length) {\r\n          setIsLoading(false);\r\n        }\r\n      }\r\n    };\r\n\r\n    // Preload images\r\n    imageUrls.forEach(url => {\r\n      const img = new Image();\r\n      img.onload = checkImageLoad;\r\n      img.onerror = checkImageLoad; // Continue even if image fails\r\n      img.src = url;\r\n    });\r\n\r\n    // Fallback timeout\r\n    const timeoutId = setTimeout(() => {\r\n      if (mounted) {\r\n        setIsLoading(false);\r\n      }\r\n    }, 3000);\r\n\r\n    return () => {\r\n      mounted = false;\r\n      clearTimeout(timeoutId);\r\n    };\r\n  }, [imageUrls]);\r\n\r\n  return { isLoading, loadedCount, totalImages: imageUrls.length };\r\n};\r\n\r\nexport const usePageLoading = () => {\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const handleLoad = () => {\r\n      setIsLoading(false);\r\n    };\r\n\r\n    if (document.readyState === 'complete') {\r\n      setIsLoading(false);\r\n    } else {\r\n      window.addEventListener('load', handleLoad);\r\n      return () => window.removeEventListener('load', handleLoad);\r\n    }\r\n  }, []);\r\n\r\n  return { isLoading };\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}